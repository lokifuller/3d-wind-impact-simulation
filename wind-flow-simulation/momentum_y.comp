#version 430
layout(local_size_x=8,local_size_y=8,local_size_z=8) in;

// bindings 0->U  1->V  2->W  3->P  5->V*
layout(std430, binding=0) readonly  buffer UIn        { float u[];     };
layout(std430, binding=1) readonly  buffer VIn        { float v[];     };
layout(std430, binding=2) readonly  buffer WIn        { float w[];     };
layout(std430, binding=3) readonly  buffer PIn        { float p[];     };
layout(std430, binding=5) writeonly buffer VStarOut  { float vStar[]; };
layout(std430, binding=9) readonly  buffer SolidMask { int   solidMask[]; };

uniform float dx, dy, dz, dt, Re, alphaU;
uniform int   Nx, Ny, Nz;

uint idxU(uint i,uint j,uint k){ return k*Ny*(Nx+1u)+j*(Nx+1u)+i; }
uint idxV(uint i,uint j,uint k){ return k*(Ny+1u)*Nx   +j*Nx       +i; }
uint idxW(uint i,uint j,uint k){ return k*(Ny*Nx)     +j*Nx       +i; }
uint idxP(uint i,uint j,uint k){ return k*(Ny*Nx)     +j*Nx       +i; }

void main(){
    uvec3 gid=gl_GlobalInvocationID;
    uint i=gid.x,j=gid.y,k=gid.z;

    // Inlet: v=0 at i=0
    if(i==0u){
        vStar[idxV(i,j,k)] = 0.0;
        return;
    }

    // Obstacle → zero
    if(i<uint(Nx)&& j>0u && j<=uint(Ny) && k<uint(Nz)){
        if(solidMask[idxP(i,j-1,k)]==1 || solidMask[idxP(i,j,k)]==1){
            vStar[idxV(i,j,k)] = 0.0;
            return;
        }
    }

    // Interior y‐momentum
    if(i<uint(Nx) && j>0u && j<uint(Ny) && k<uint(Nz)){
        float dpdy = (p[idxP(i,j,k)] - p[idxP(i,j-1,k)])/dy;
        float uF = 0.5*(u[idxU(i,j,k)] + u[idxU(i,j+1,k)]);
        float wF = 0.5*(w[idxW(i,j,k)] + w[idxW(i,j,k+1)]);
        float conv = uF*(v[idxV(i+1,j,k)]-v[idxV(i-1,j,k)])/(2.0*dx)
                   + 0.5*(v[idxV(i,j,k)]+v[idxV(i,j+1,k)])*(v[idxV(i,j+1,k)]-v[idxV(i,j-1,k)])/dy
                   + wF*(v[idxV(i,j,k+1)]-v[idxV(i,j,k-1)])/dz;
        float diff = (v[idxV(i+1,j,k)]-2.0*v[idxV(i,j,k)]+v[idxV(i-1,j,k)])/(dx*dx)
                   + (v[idxV(i,j+1,k)]-2.0*v[idxV(i,j,k)]+v[idxV(i,j-1,k)])/(dy*dy)
                   + (v[idxV(i,j,k+1)]-2.0*v[idxV(i,j,k)]+v[idxV(i,j,k-1)])/(dz*dz);
        float vRaw = v[idxV(i,j,k)] + dt*(-conv + diff/Re - dpdy);
        vStar[idxV(i,j,k)] = v[idxV(i,j,k)] + alphaU*(vRaw - v[idxV(i,j,k)]);
        return;
    }

    // Outlet zero‐gradient
    if(i==uint(Nx)){
        vStar[idxV(i,j,k)] = v[idxV(i-1u,j,k)];
        return;
    }

    // Else → zero
    vStar[idxV(i,j,k)] = 0.0;
}
